// backend/models/PaymentOrder.js
const mongoose = require("mongoose");

const PaymentOrderSchema = new mongoose.Schema({
    userId: {
        type: mongoose.Schema.ObjectId,
        ref: "User",
        required: true,
    },
    gatewayInvoiceId: {
        // Renamed: NOWPayments' unique ID for this payment
        type: String,
        required: true,
        unique: true,
    },
    status: {
        type: String,
        // Common NOWPayments statuses: 'waiting', 'confirming', 'confirmed', 'sending', 'finished', 'failed', 'refunded', 'expired', 'reverse_resolved'
        enum: [
            "waiting",
            "confirming",
            "confirmed",
            "sending",
            "finished",
            "failed",
            "refunded",
            "expired",
            "reverse_resolved",
            "canceled",
        ],
        default: "waiting", // Initial status for NOWPayments
    },
    amountUsd: {
        // The USD amount the user intended to pay
        type: Number,
        required: true,
    },
    dpowerToCredit: {
        // The Dpower amount to credit upon successful payment
        type: Number,
        required: true,
    },
    cryptoCurrency: {
        // The cryptocurrency chosen by the user (e.g., 'btc', 'usdttrc20')
        type: String,
        required: true,
    },
    payAddress: {
        // The crypto address generated by NOWPayments for this invoice
        type: String,
        required: true,
    },
    payAmountCrypto: {
        // The exact crypto amount to send (provided by NOWPayments)
        type: Number,
        required: true,
    },
    webhookData: {
        // Store raw webhook data for debugging/auditing
        type: Object,
        default: {},
    },
    createdAt: {
        type: Date,
        default: Date.now,
    },
    updatedAt: {
        type: Date,
        default: Date.now,
    },
});

// Update `updatedAt` field on save
PaymentOrderSchema.pre("save", function (next) {
    this.updatedAt = Date.now();
    next();
});

module.exports = mongoose.model("PaymentOrder", PaymentOrderSchema);
